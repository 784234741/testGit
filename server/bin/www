#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//创建socket服务器
let io = require("socket.io")(server,{cors:true});
let db = require("../model/db");
//在线用户
let users = {};
//监听connection事件-当有客户端连接时触发
io.on("connection",function(socket){ //socket:客户端的socket连接实例
  console.log("客户端连接成功："+socket.id)
  //用户上线
  socket.on("online",uid=>{
    users["uid"+uid] = socket.id;
    console.log("用户上线")
    console.log(users);
  });
  //用户下线
  socket.on("offline",uid=>{
    delete users["uid"+uid];
    console.log("用户下线")
    console.log(users);
  })
  //监听客户端发送请求
  socket.on("sendmsg",function(data){
    //data就是客户端发送的请求数据
    console.log("这是客户端发送的数据："+data);
    //保存信息到数据库
    db.add("msg",Object.keys(data),Object.values(data)).then(res=>{
      if(res > 0){
        //给客户端推送数据
        socket.emit("receivemsg",data);  //给当前发送请求的用户推送数据
        //判断接收信息的用户是否在线
        if(users["uid"+data.toB]){
          console.log("推送信息");
          io.to(users["uid"+data.toB]).emit("receivemsg",data);  //给接收信息的用户推送数据
        }
      }
    })
  })
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
